package com.example.dungeon.core;

import com.example.dungeon.model.*;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.util.stream.Collectors;

public class Game {
    private final GameState state = new GameState();
    private final Map<String, Command> commands = new LinkedHashMap<>();
    // –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è Map-–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç - –±–ª–æ–∫ –∫–æ–¥–∞ - —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Command, –≤ –µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏—è

    static {
        WorldInfo.touch("Game");
    }

    public Game() {
        registerCommands();
        bootstrapWorld();
    }

    private void registerCommands() {
        commands.put("help", (ctx, a) -> System.out.println("–ö–æ–º–∞–Ω–¥—ã: " + String.join(", ", commands.keySet())));
        commands.put("gc-stats", (ctx, a) -> {
            Runtime rt = Runtime.getRuntime();
            long free = rt.freeMemory(), total = rt.totalMemory(), used = total - free;  // –¢—Ä–∏ long –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            System.out.println("–ü–∞–º—è—Ç—å: used=" + used + " free=" + free + " total=" + total);
        });

        commands.put("alloc", (ctx, a) -> {     //–≤–º–µ—Å—Ç–æ gc-stats —É–º–µ—â–∞—é –∑–∞–º–µ—Ä—ã –ø–∞–º—è—Ç–∏ –¥–æ –∏ –ø–æ—Å–ª–µ alloc
            Runtime rt = Runtime.getRuntime();

            // –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–û
            long freeBefore = rt.freeMemory(), totalBefore = rt.totalMemory(), usedBefore = totalBefore - freeBefore;
            System.out.println("–ü–∞–º—è—Ç—å –î–û: used=" + usedBefore + " free=" + freeBefore + " total=" + totalBefore);

            // –í—ã–¥–µ–ª—è–µ–º 50 –ú–ë
            System.out.println("–í—ã–¥–µ–ª—è–µ–º 50 –ú–ë –ø–∞–º—è—Ç–∏...");
            List<byte[]> garbage = new ArrayList<>();
            for (int i = 0; i < 50; i++) {
                garbage.add(new byte[1_000_000]);
            }

            // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –≤—ã–¥–µ–ª–µ–Ω–∏—è (–î–û GC)
            long freeAfterAlloc = rt.freeMemory(), totalAfterAlloc = rt.totalMemory(), usedAfterAlloc = totalAfterAlloc - freeAfterAlloc;
            System.out.println("–ü–∞–º—è—Ç—å –ü–û–°–õ–ï –≤—ã–¥–µ–ª–µ–Ω–∏—è: used=" + usedAfterAlloc + " free=" + freeAfterAlloc + " total=" + totalAfterAlloc);

            // –ó–∞–ø—É—Å–∫–∞–µ–º GC
            System.out.println("–í—ã–∑—ã–≤–∞–µ–º —Å–±–æ—Ä–∫—É –º—É—Å–æ—Ä–∞ (GC)...");
            System.gc();

            // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï GC
            long freeAfterGC = rt.freeMemory(), totalAfterGC = rt.totalMemory(), usedAfterGC = totalAfterGC - freeAfterGC;
            System.out.println("–ü–∞–º—è—Ç—å –ü–û–°–õ–ï GC: used=" + usedAfterGC + " free=" + freeAfterGC + " total=" + totalAfterGC);
        });

        commands.put("look", (ctx, unused) -> System.out.println(ctx.getCurrent().describe())); //–æ–±—ä–µ–∫—ÇGameState.–¥–∞–µ—Ç–ö–æ–º–Ω–∞—Ç—É.–¥–∞–µ—Ç–û–ø–∏—Å–∞–Ω–∏–µ–ö–æ–º–Ω–∞—Ç—ã
        commands.put("stats", (ctx, a) -> {
            Player p = ctx.getPlayer();
            System.out.println("–ó–¥–æ—Ä–æ–≤—å–µ: " + p.getHp());
            System.out.println("–ê—Ç–∞–∫–∞: " + p.getAttack());
        });
        commands.put("move", (ctx, a) -> {
            if (a.isEmpty()) {
                throw new InvalidCommandException("–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–æ–µ-—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Å–µ–≤–µ—Ä, —é–≥, –≤–æ—Å—Ç–æ–∫, –∑–∞–ø–∞–¥");
            }
            String dir = a.getFirst().toLowerCase(Locale.ROOT); // –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            Room current = ctx.getCurrent(); // —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª–µ Room current –æ–±—ä–µ–∫—Ç–∞-—Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ä–µ–¥—ã ctx (–∫–æ–Ω—Ç–µ–∫—Å—Ç)

            // üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ –ª–∏ –¥–≤–µ—Ä—å –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            if (current.isExitLocked(dir)) {
                // –ò—â–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ª—é–±–æ–π –ø—Ä–µ–¥–º–µ—Ç —Ç–∏–ø–∞ Key (–∫–ª—é—á)
                boolean hasKey = ctx.getPlayer().getInventory().stream()
                        .anyMatch(item -> item instanceof Key);
                if (!hasKey) {
                    throw new InvalidCommandException("–î–≤–µ—Ä—å –Ω–∞ " + dir + " –∑–∞–ø–µ—Ä—Ç–∞! –ù—É–∂–µ–Ω –∫–ª—é—á.");
                }
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–≤–µ—Ä—å (—É–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É)
                current.unlockExit(dir);
                System.out.println("–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–ª—é—á –∏ –æ—Ç–∫—Ä—ã–ª–∏ –¥–≤–µ—Ä—å –Ω–∞ " + dir + "!");
            }

            Room next = current.getNeighbors().get(dir); // –æ–±—ä—è–≤–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç Map-—ã Map<String, Room> neighbors –ø–æ –∫–ª—é—á—É
            if (next == null) {
                throw new InvalidCommandException("–ù–µ–ª—å–∑—è –ø–æ–π—Ç–∏ –Ω–∞ " + dir + " –æ—Ç—Å—é–¥–∞.");
            }
            ctx.setCurrent(next); // –º–æ—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –∑–¥–µ—Å—å move –¥–µ–ª–∞–µ—Ç current-–∫–æ–º–Ω–∞—Ç–æ–π next-–∫–æ–º–Ω–∞—Ç—É
            System.out.println("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤: " + next.getName());
            System.out.println(next.describe());
        });

        commands.put("take", (ctx, a) -> {
            if (a.isEmpty()) {          //–Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ take –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
                throw new InvalidCommandException("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞");
            }
            String itemName = String.join(" ", a); // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–º—ë–Ω –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤
            Room room = ctx.getCurrent();           //–∫–æ–ø–∏—Ä—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
            List<Item> items = room.getItems();     //–∫–æ–ø–∏—Ä—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –µ–µ items-—Å—ã(–ø—Ä–µ–¥–º–µ—Ç—ã)
            Item target = null;                     //–æ–±—ä—è–≤–∏–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∏—Å–∫–æ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            for (Item item : items) {
                if (item.getName().equalsIgnoreCase(itemName)) {    //–∏—â—É –≤ –ª–∏—Å—Ç–µ —Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç
                    target = item;          //–µ—Å–ª–∏ –æ–Ω, —Ç–æ –≤–Ω–æ—Å–∏–º –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é-–æ–±—ä–µ–∫—Ç
                    break;                  //–∏ –ø–æ—Å–ª–µ –≥–∞—Å–∏–º —Ü–∏–∫–ª
                }
            }
            if (target == null) {           //–ø—Ä–æ–≤–µ—Ä–∫–∞
                throw new InvalidCommandException("–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ '" + itemName + "'");
            }
            items.remove(target);           //–∏–∑ items-—Å–æ–≤ –∫–æ–º–Ω–∞—Ç—ã —É–¥–∞–ª—è—é –ø—Ä–µ–¥–º–µ—Ç
            ctx.getPlayer().getInventory().add(target);     //–∏ –¥–æ–±–∞–≤–ª—è—é –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä—Å–∞
            System.out.println("–í–∑—è—Ç–æ: " + target.getName());
        });

        commands.put("inventory", (ctx, a) -> {
            List<Item> inv = ctx.getPlayer().getInventory();   //—Å—Å—ã–ª–∫–∞ –Ω–∞ List(–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å) –ø–µ—Ä—Å–∞
            if (inv.isEmpty()) {
                System.out.println("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç–æ–π.");
                return;
            }

            // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É + —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ (Stream API)
            // —Ç –µ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Ç–∏–ø—É –ø–æ—Ç–æ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã —Ç–∏–ø–∞
            Map<String, List<Item>> grouped = inv.stream()      //–∑–∞–ø—É—Å–∫–∞—é —Å—Ç—Ä–∏–º, —Ä–µ–∑—É–ª—å—Ç–∞—Ç -> grouped
                    //¬´–í–∑—è—Ç—å —Å–ø–∏—Å–æ–∫ ‚Üí —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–∏–ø—É ‚Üí –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø ‚Üí –≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç—É¬ª.
                    .collect(Collectors.groupingBy(     //—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∏–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            item -> item.getClass().getSimpleName(),  // –ö–ª—é—á –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏. –≠—Ç–∞ –ª—è–º–±–¥–∞, –¥–æ—Å—Ç–∞–µ—Ç –∏–º—è —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                            TreeMap::new,                                  // —Ç–∞–∫–∞—è Map-–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –∫–ª—é—á—É
                            Collectors.collectingAndThen(                  // –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
                                    Collectors.toList(),                   // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤ –æ–±—ã—á–Ω—ã–π List
                                    list -> list.stream()        // –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫ —ç—Ç–æ–º—É —Å–ø–∏—Å–∫—É: —Å–æ–∑–¥–∞—ë—Ç –∏–∑ –Ω–µ–≥–æ stream,
                                            .sorted(Comparator.comparing(Item::getName))    //—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ item.getName() (–∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é),
                                            .toList()                      // —Å–æ–±–∏—Ä–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω–æ–≤—ã–π –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π —Å–ø–∏—Å–æ–∫.
                            )
                    ));

            System.out.println("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:");
            grouped.forEach((type, items) -> {
                System.out.println("- " + type + " (" + items.size() + "): " +
                        items.stream().map(Item::getName).collect(Collectors.joining(", ")));
            });         // —Ç—É—Ç —Å—Ç—Ä–∏–º –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å grouped
        });

        commands.put("use", (ctx, a) -> {
            if (a.isEmpty()) {
                throw new InvalidCommandException("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è");
            }
            String itemName = String.join(" ", a);      //—Å–æ–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞ –≤ –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
            Player p = ctx.getPlayer();                         //—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä—Å–∞
            Item target = null;                                 //—Å—Å—ã–ª–æ—á–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            for (Item item : p.getInventory()) {                //–∏—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–µ—Ä—Å–∞
                if (item.getName().equalsIgnoreCase(itemName)) {
                    target = item;                              //–Ω–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ
                    break;
                }
            }
            if (target == null) {
                throw new InvalidCommandException("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ '" + itemName + "'");
            }
            target.apply(ctx); // "–ü—Ä–∏–º–µ–Ω—è–µ–º". –ó–¥–µ—Å—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º —á–µ—Ä–µ–∑ apply()
        });

        commands.put("fight", (ctx, a) -> {
            Room room = ctx.getCurrent();
            List<Monster> monsters = room.getMonsters();

            if (monsters.isEmpty()) {
                throw new InvalidCommandException("–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –º–æ–Ω—Å—Ç—Ä–æ–≤");
            }

            Player player = ctx.getPlayer();
            if (player.getHp() <= 0) {
                System.out.println("–í—ã –º–µ—Ä—Ç–≤—ã. –ù–µ–ª—å–∑—è —Å—Ä–∞–∂–∞—Ç—å—Å—è.");
                return;
            }

            // –ï—Å–ª–∏ –º–æ–Ω—Å—Ç—Ä –æ–¥–∏–Ω ‚Äî –±—å—ë–º –µ–≥–æ –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
            Monster target;
            if (monsters.size() == 1) {
                target = monsters.get(0);
            } else {
                // –ï—Å–ª–∏ –º–æ–Ω—Å—Ç—Ä–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ –∏–º–µ–Ω–∏
                if (a.isEmpty()) {
                    System.out.println("–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–Ω—Å—Ç—Ä–æ–≤:");
                    for (int i = 0; i < monsters.size(); i++) {
                        Monster m = monsters.get(i);
                        System.out.println((i + 1) + ". " + m.getName() + " (HP: " + m.getHp() + ")");
                    }
                    throw new InvalidCommandException("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –º–æ–Ω—Å—Ç—Ä–∞: fight <–∏–º—è>");
                }
                String monsterName = String.join(" ", a);
                target = monsters.stream()
                        .filter(m -> m.getName().equalsIgnoreCase(monsterName))
                        .findFirst()
                        .orElseThrow(() -> new InvalidCommandException("–ú–æ–Ω—Å—Ç—Ä '" + monsterName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            }

            // –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
            int baseDamage = player.getAttack();
            int damageToMonster = baseDamage;

            // –û—Å–æ–±–æ–µ —É—Å–ª–æ–≤–∏–µ: –ë–µ–∑—ã–º—è–Ω–Ω—ã–π –°—Ç—Ä–∞–∂ —É—è–∑–≤–∏–º –¢–û–õ–¨–ö–û –∫ –ú–µ—á—É –•—Ä–∞–Ω–∏—Ç–µ–ª–µ–π
            if ("–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –°—Ç—Ä–∞–∂".equals(target.getName())) {
                boolean hasSword = player.getInventory().stream()
                        .anyMatch(item -> "–ú–µ—á –•—Ä–∞–Ω–∏—Ç–µ–ª–µ–π".equals(item.getName()));
                if (!hasSword) {
                    System.out.println("–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –°—Ç—Ä–∞–∂ –Ω–µ—É—è–∑–≤–∏–º! –í–∞–º –Ω—É–∂–µ–Ω –ú–µ—á –•—Ä–∞–Ω–∏—Ç–µ–ª–µ–π!");
                    damageToMonster = 0;
                }
            }
            target.setHp(target.getHp() - damageToMonster);
            System.out.println("–í—ã –±—å—ë—Ç–µ " + target.getName() + " –Ω–∞ " + damageToMonster + ". HP: " + Math.max(0, target.getHp()));

            if (target.getHp() <= 0) {
                System.out.println("–ú–æ–Ω—Å—Ç—Ä " + target.getName() + " –ø–æ–±–µ–∂–¥—ë–Ω! +50 –æ—á–∫–æ–≤.");
                ctx.addScore(50);
                // –î—Ä–æ–ø: –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–µ–ª—å–µ
                room.getItems().add(new Potion("–ó–µ–ª—å–µ –ø–æ–±–µ–¥—ã", 10));
                monsters.remove(target); // —É–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Å—Å–∞
                if ("–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –°—Ç—Ä–∞–∂".equals(target.getName())) {
                    System.out.println("–ê—Ä—Ç–µ—Ñ–∞–∫—Ç –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è –æ—Å–ª–µ–ø–∏—Ç–µ–ª—å–Ω—ã–º —Å–≤–µ—Ç–æ–º! –ü—Ä–æ–∫–ª—è—Ç–∏–µ —Å–Ω—è—Ç–æ.");
                    System.out.println("üéâ –ü–û–ë–ï–î–ê! –¢—ã —Å–ø–∞—Å –≠–ª—å–¥–∞—Ä–∏—é!");
                    SaveLoad.writeScore(ctx.getPlayer().getName(), ctx.getScore());
                    System.exit(0);
                }
                return;
            }

            // –ê—Ç–∞–∫–∞ –º–æ–Ω—Å—Ç—Ä–∞
            int monsterDamage = target.getLevel() * 2 + 1;
            player.setHp(player.getHp() - monsterDamage);
            System.out.println(target.getName() + " –∞—Ç–∞–∫—É–µ—Ç –Ω–∞ " + monsterDamage + ". –í–∞—à–µ HP: " + Math.max(0, player.getHp()));

            if (player.getHp() <= 0) {
                System.out.println("üíÄ –í—ã –ø–æ–≥–∏–±–ª–∏! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.");
                System.out.println("–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: " + ctx.getScore());
                SaveLoad.writeScore(ctx.getPlayer().getName(), ctx.getScore());
                System.out.println("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!");
                return; // –≤—ã–π—Ç–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –∞ –Ω–µ –∏–∑ JVM
            }
        });
        commands.put("save", (ctx, a) -> SaveLoad.save(ctx));
        commands.put("load", (ctx, a) -> SaveLoad.load(ctx));
        commands.put("scores", (ctx, a) -> SaveLoad.printScores());
        commands.put("exit", (ctx, a) -> {
            System.out.println("–ü–æ–∫–∞!");
            System.exit(0);
        });
    }

    private void bootstrapWorld() {
        Player hero = new Player("–ì–µ—Ä–æ–π", 20, 5);
        state.setPlayer(hero);

        Room square = new Room("–ü–ª–æ—â–∞–¥—å", "–ö–∞–º–µ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å —Å —Ü–µ–ª–µ–±–Ω—ã–º —Ñ–æ–Ω—Ç–∞–Ω–æ–º. –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª—É—á —Å–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥ —Ç—å–º–æ–π.");
        Room forest = new Room("–õ–µ—Å", "–®–µ–ª–µ—Å—Ç –ª–∏—Å—Ç–≤—ã –∏ –ø—Ç–∏—á–∏–π —â–µ–±–µ—Ç. –ù–æ –≤–µ—Ç–µ—Ä –Ω–µ—Å—ë—Ç –∑–∞–ø–∞—Ö —Ç–ª–µ–Ω–∞...");
        Room cave = new Room("–ü–µ—â–µ—Ä–∞", "–¢–µ–º–Ω–æ –∏ —Å—ã—Ä–æ. –ì–¥–µ-—Ç–æ —Å–ª—ã—à–µ–Ω –∑–≤–æ–Ω —Ü–µ–ø–µ–π...");
        Room secret = new Room("–¢–∞–π–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞", "–ó–¥–µ—Å—å –ø–∞—Ö–Ω–µ—Ç –¥—Ä–µ–≤–Ω–æ—Å—Ç—å—é. –ù–∞ –∫–∞–º–Ω–µ –ª–µ–∂–∏—Ç –ú–µ—á –•—Ä–∞–Ω–∏—Ç–µ–ª–µ–π ‚Äî –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–∞–¥–µ–∂–¥–∞ –ø—Ä–æ—Ç–∏–≤ —Ç—å–º—ã.");
        Room sanctuary = new Room("–°–≤—è—Ç–∏–ª–∏—â–µ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–∞", "–¢—å–º–∞ —Å–≥—É—â–∞–µ—Ç—Å—è. –ù–∞ –ø—å–µ–¥–µ—Å—Ç–∞–ª–µ –ø—É–ª—å—Å–∏—Ä—É–µ—Ç –ß—ë—Ä–Ω—ã–π –ê—Ä—Ç–µ—Ñ–∞–∫—Ç.");

        // –°–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–º–Ω–∞—Ç–∞–º–∏
        square.getNeighbors().put("north", forest);
        forest.getNeighbors().put("south", square);
        forest.getNeighbors().put("east", cave);
        cave.getNeighbors().put("west", forest);
        cave.getNeighbors().put("north", secret);
        secret.getNeighbors().put("south", cave);
        secret.getNeighbors().put("east", sanctuary); // ‚Üê –¥–≤–µ—Ä—å –≤ —Å–≤—è—Ç–∏–ª–∏—â–µ
        sanctuary.getNeighbors().put("west", secret);

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–≤–µ—Ä—å –≤ –¢–∞–π–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –∏ –≤ –°–≤—è—Ç–∏–ª–∏—â–µ
        cave.lockExit("north");        // –¥–≤–µ—Ä—å –≤ –¢–∞–π–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
        secret.lockExit("east");       // –¥–≤–µ—Ä—å –≤ –°–≤—è—Ç–∏–ª–∏—â–µ

        // –ü—Ä–µ–¥–º–µ—Ç—ã
        forest.getItems().add(new Potion("–ú–∞–ª–æ–µ –∑–µ–ª—å–µ", 5));
        cave.getItems().add(new Key("–ß—ë—Ä–Ω—ã–π –ö–ª—é—á"));
        secret.getItems().add(new Weapon("–ú–µ—á –•—Ä–∞–Ω–∏—Ç–µ–ª–µ–π", 10));

        // –ú–æ–Ω—Å—Ç—Ä—ã
        forest.getMonsters().add(new Monster("–í–æ–ª–∫", 1, 8));
        cave.getMonsters().add(new Monster("–ì–æ–±–ª–∏–Ω-—Å—Ç—Ä–∞–∂", 2, 15));
        cave.getMonsters().add(new Monster("–°–∫–µ–ª–µ—Ç", 1, 10)); // –≤—Ç–æ—Ä–æ–π –º–æ–Ω—Å—Ç—Ä
        sanctuary.getMonsters().add(new Monster("–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –°—Ç—Ä–∞–∂", 5, 100));

        state.setCurrent(square);
    }

    public void run() {
        System.out.println("DungeonMini (TEMPLATE). 'help' ‚Äî –∫–æ–º–∞–Ω–¥—ã.");
        try (BufferedReader in = new BufferedReader(new InputStreamReader(System.in))) {
            while (true) { //–≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á—Ç–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –±—É—Ñ–µ—Ä–∞, –∏ –ø–æ—Ç–æ–º –µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                System.out.print("> ");
                String line = in.readLine(); //—á–∏—Ç–∞–µ–º –±—É—Ñ–µ—Ä
                if (line == null) break;
                line = line.trim();             // –æ–±—Ä–µ–∑–∞–µ—Ç –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Ñ—Ä–∞–∑—ã –ø—Ä–æ–±–µ–ª—ã(–≤–∫–ª—é—á–∞—è —Ç–∞–±—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã)
                if (line.isEmpty()) continue;   // –µ—Å–ª–∏ –ø—É—Å—Ç–æ, —Ç–æ –∏—Ç–µ—Ä–∞—Ü–∏—è —Ü–∏–∫–ª–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
                List<String> parts = Arrays.asList(line.split("\\s+")); //–¥–µ–ª–∏—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ª–æ–≤–∞, \s+ - –≤—ã—Ä–∞–∂–µ–Ω–∏–µ ¬´–æ–¥–∏–Ω –∏–ª–∏ –±–æ–ª–µ–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤¬ª
                String cmd = parts.getFirst().toLowerCase(Locale.ROOT);   //Locale.ROOT –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                List<String> args = parts.subList(1, parts.size());     //–Ω–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π List, –∞ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —á–∞—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ç –µ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (view) —Å–ø–∏—Å–∫–∞ parts
                Command c = commands.get(cmd); //–ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ –µ—ë –∏–º–µ–Ω–∏
                //c ‚Äî —ç—Ç–æ —Å—Å—ã–ª–∫–∞ (—Ç–æ—á–Ω–µ–µ, —Å—Å—ã–ª–æ—á–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è) –Ω–∞ –æ–±—ä–µ–∫—Ç, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Command.
                try {
                    if (c == null) throw new InvalidCommandException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + cmd);
                    c.execute(state, args);
                    state.addScore(1); //–¥–æ–±–∞–≤–ª—è–µ—Ç 1 –æ—á–∫–æ –∑–∞ –∫–∞–∂–¥—É—é —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
                } catch (InvalidCommandException e) {
                    System.out.println("–û—à–∏–±–∫–∞: " + e.getMessage());
                } catch (Exception e) {
                    System.out.println("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: " + e.getClass().getSimpleName() + ": " + e.getMessage());
                }
            }
        } catch (IOException e) {
            System.out.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞: " + e.getMessage());
        } finally {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á—ë—Ç –ø—Ä–∏ –ª—é–±–æ–º –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã
            if (state.getPlayer() != null) {
                SaveLoad.writeScore(state.getPlayer().getName(), state.getScore());
            }
        }
    }
}
