package com.example.dungeon.core;

import com.example.dungeon.model.*;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.util.stream.Collectors;

public class Game {
    private final GameState state = new GameState();
    private final Map<String, Command> commands = new LinkedHashMap<>();
    // –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è Map-–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç - –±–ª–æ–∫ –∫–æ–¥–∞ - —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Command, –≤ –µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏—è

    static {
        WorldInfo.touch("Game");
    }

    public Game() {
        registerCommands();
        bootstrapWorld();
    }

    private void registerCommands() {
        commands.put("help", (ctx, a) -> System.out.println("–ö–æ–º–∞–Ω–¥—ã: " + String.join(", ", commands.keySet())));
        commands.put("gc-stats", (ctx, a) -> {
            Runtime rt = Runtime.getRuntime();
            long free = rt.freeMemory(), total = rt.totalMemory(), used = total - free;  // —Ç—Ä–∏ –ª–æ–Ω–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            System.out.println("–ü–∞–º—è—Ç—å: used=" + used + " free=" + free + " total=" + total);
        });
        commands.put("look", (ctx, unused) -> System.out.println(ctx.getCurrent().describe())); //–æ–±—ä–µ–∫—ÇGameState.–¥–∞–µ—Ç–ö–æ–º–Ω–∞—Ç—É.–¥–∞–µ—Ç–û–ø–∏—Å–∞–Ω–∏–µ–ö–æ–º–Ω–∞—Ç—ã
        commands.put("move", (ctx, a) -> {
            if (a.isEmpty()) {
                throw new InvalidCommandException("–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–æ–µ-—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: north, south, east, west");
            }
            String dir = a.getFirst().toLowerCase(Locale.ROOT); // –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            Room current = ctx.getCurrent(); // –æ–±—ä—è–≤–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª–µ Room current –æ–±—ä–µ–∫—Ç–∞-—Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ä–µ–¥—ã ctx (–∫–æ–Ω—Ç–µ–∫—Å—Ç)
            Room next = current.getNeighbors().get(dir); // –æ–±—ä—è–≤–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç Map-—ã Map<String, Room> neighbors –ø–æ –∫–ª—é—á—É
            if (next == null) {
                throw new InvalidCommandException("–ù–µ–ª—å–∑—è –ø–æ–π—Ç–∏ –Ω–∞ " + dir + " –æ—Ç—Å—é–¥–∞.");
            }
            ctx.setCurrent(next);       //–º–æ—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –∑–¥–µ—Å—å move –¥–µ–ª–∞–µ—Ç current-–∫–æ–º–Ω–∞—Ç–æ–π next-–∫–æ–º–Ω–∞—Ç—É
            System.out.println("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤: " + next.getName());
            System.out.println(next.describe());
        });

        commands.put("take", (ctx, a) -> {
            if (a.isEmpty()) {          //–Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ take –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
                throw new InvalidCommandException("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞");
            }
            String itemName = String.join(" ", a); // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–º—ë–Ω –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤
            Room room = ctx.getCurrent();           //–≤–∑—è–ª–∏ —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
            List<Item> items = room.getItems();     //–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –Ω–µ–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            Item target = null;                     //–æ–±—ä—è–≤–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∏—Å–∫–æ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            for (Item item : items) {
                if (item.getName().equalsIgnoreCase(itemName)) {    //–∏—â—É –≤ –ª–∏—Å—Ç–µ —Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç
                    target = item;          //–µ—Å–ª–∏ –æ–Ω, —Ç–æ –≤–Ω–æ—Å–∏–º –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é-–æ–±—ä–µ–∫—Ç
                    break;                  //–∏ –ø–æ—Å–ª–µ –≥–∞—Å–∏–º —Ü–∏–∫–ª
                }
            }
            if (target == null) {           //–ø—Ä–æ–≤–µ—Ä–∫–∞
                throw new InvalidCommandException("–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ '" + itemName + "'");
            }
            items.remove(target);
            ctx.getPlayer().getInventory().add(target);
            System.out.println("–í–∑—è—Ç–æ: " + target.getName());
        });

        commands.put("inventory", (ctx, a) -> {
            List<Item> inv = ctx.getPlayer().getInventory();
            if (inv.isEmpty()) {
                System.out.println("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.");
                return;
            }

            // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É + —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ (Stream API)
            Map<String, List<Item>> grouped = inv.stream()
                    .collect(Collectors.groupingBy(
                            item -> item.getClass().getSimpleName(),
                            TreeMap::new, // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É
                            Collectors.collectingAndThen(
                                    Collectors.toList(),
                                    list -> list.stream()
                                            .sorted(Comparator.comparing(Item::getName))
                                            .toList()
                            )
                    ));

            System.out.println("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:");
            grouped.forEach((type, items) -> {
                System.out.println("- " + type + " (" + items.size() + "): " +
                        items.stream().map(Item::getName).collect(Collectors.joining(", ")));
            });
        });

        commands.put("use", (ctx, a) -> {
            if (a.isEmpty()) {
                throw new InvalidCommandException("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è");
            }
            String itemName = String.join(" ", a);
            Player p = ctx.getPlayer();
            Item target = null;
            for (Item item : p.getInventory()) {
                if (item.getName().equalsIgnoreCase(itemName)) {
                    target = item;
                    break;
                }
            }
            if (target == null) {
                throw new InvalidCommandException("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ '" + itemName + "'");
            }
            target.apply(ctx); // –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º —á–µ—Ä–µ–∑ apply()
        });

        commands.put("fight", (ctx, a) -> {
            Room room = ctx.getCurrent();
            Monster monster = room.getMonster();
            if (monster == null) {
                throw new InvalidCommandException("–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –º–æ–Ω—Å—Ç—Ä–∞");
            }

            Player player = ctx.getPlayer();
            if (player.getHp() <= 0) {
                System.out.println("–í—ã –º–µ—Ä—Ç–≤—ã. –ù–µ–ª—å–∑—è —Å—Ä–∞–∂–∞—Ç—å—Å—è.");
                return;
            }

            // –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
            int damageToMonster = player.getAttack();
            monster.setHp(monster.getHp() - damageToMonster);
            System.out.println("–í—ã –±—å—ë—Ç–µ " + monster.getName() + " –Ω–∞ " + damageToMonster + ". HP –º–æ–Ω—Å—Ç—Ä–∞: " + Math.max(0, monster.getHp()));

            if (monster.getHp() <= 0) {
                System.out.println("–ú–æ–Ω—Å—Ç—Ä –ø–æ–±–µ–∂–¥—ë–Ω! +50 –æ—á–∫–æ–≤.");
                ctx.addScore(50);
                // –î—Ä–æ–ø: –¥–æ–±–∞–≤–∏–º –∑–µ–ª—å–µ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
                room.getItems().add(new Potion("–ó–µ–ª—å–µ –ø–æ–±–µ–¥—ã", 10));
                room.setMonster(null);
                return;
            }

            // –ê—Ç–∞–∫–∞ –º–æ–Ω—Å—Ç—Ä–∞
            int monsterDamage = monster.getLevel() * 2 + 1; // –ø—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞
            player.setHp(player.getHp() - monsterDamage);
            System.out.println("–ú–æ–Ω—Å—Ç—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ " + monsterDamage + ". –í–∞—à–µ HP: " + Math.max(0, player.getHp()));

            if (player.getHp() <= 0) {
                System.out.println("üíÄ –í—ã –ø–æ–≥–∏–±–ª–∏! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.");
                System.out.println("–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: " + ctx.getScore());
                System.exit(0);
            }
        });
        commands.put("save", (ctx, a) -> SaveLoad.save(ctx));
        commands.put("load", (ctx, a) -> SaveLoad.load(ctx));
        commands.put("scores", (ctx, a) -> SaveLoad.printScores());
        commands.put("exit", (ctx, a) -> {
            System.out.println("–ü–æ–∫–∞!");
            System.exit(0);
        });
    }

    private void bootstrapWorld() {
        Player hero = new Player("–ì–µ—Ä–æ–π", 20, 5);
        state.setPlayer(hero);

        Room square = new Room("–ü–ª–æ—â–∞–¥—å", "–ö–∞–º–µ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å —Å —Ñ–æ–Ω—Ç–∞–Ω–æ–º.");
        Room forest = new Room("–õ–µ—Å", "–®–µ–ª–µ—Å—Ç –ª–∏—Å—Ç–≤—ã –∏ –ø—Ç–∏—á–∏–π —â–µ–±–µ—Ç.");
        Room cave = new Room("–ü–µ—â–µ—Ä–∞", "–¢–µ–º–Ω–æ –∏ —Å—ã—Ä–æ.");
        square.getNeighbors().put("—Å–µ–≤–µ—Ä", forest);
        forest.getNeighbors().put("—é–≥", square);
        forest.getNeighbors().put("–≤–æ—Å—Ç–æ–∫", cave);
        cave.getNeighbors().put("–∑–∞–ø–∞–¥", forest);

        forest.getItems().add(new Potion("–ú–∞–ª–æ–µ –∑–µ–ª—å–µ", 5));
        forest.setMonster(new Monster("–í–æ–ª–∫", 1, 8));

        state.setCurrent(square);
    }

    public void run() {
        System.out.println("DungeonMini (TEMPLATE). 'help' ‚Äî –∫–æ–º–∞–Ω–¥—ã.");
        try (BufferedReader in = new BufferedReader(new InputStreamReader(System.in))) {
            while (true) { //–≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á—Ç–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –±—É—Ñ–µ—Ä–∞, –∏ –ø–æ—Ç–æ–º –µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                System.out.print("> ");
                String line = in.readLine(); //—á–∏—Ç–∞–µ–º –±—É—Ñ–µ—Ä
                if (line == null) break;
                line = line.trim();             // –æ–±—Ä–µ–∑–∞–µ—Ç –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Ñ—Ä–∞–∑—ã –ø—Ä–æ–±–µ–ª—ã(–≤–∫–ª—é—á–∞—è —Ç–∞–±—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã)
                if (line.isEmpty()) continue;   // –µ—Å–ª–∏ –ø—É—Å—Ç–æ, —Ç–æ –∏—Ç–µ—Ä–∞—Ü–∏—è —Ü–∏–∫–ª–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
                List<String> parts = Arrays.asList(line.split("\\s+")); //–¥–µ–ª–∏—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ª–æ–≤–∞, \s+ - –≤—ã—Ä–∞–∂–µ–Ω–∏–µ ¬´–æ–¥–∏–Ω –∏–ª–∏ –±–æ–ª–µ–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤¬ª
                String cmd = parts.getFirst().toLowerCase(Locale.ROOT);   //Locale.ROOT –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                List<String> args = parts.subList(1, parts.size());     //–Ω–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π List, –∞ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —á–∞—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ç –µ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (view) —Å–ø–∏—Å–∫–∞ parts
                Command c = commands.get(cmd); //–ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ –µ—ë –∏–º–µ–Ω–∏
                //c ‚Äî —ç—Ç–æ —Å—Å—ã–ª–∫–∞ (—Ç–æ—á–Ω–µ–µ, —Å—Å—ã–ª–æ—á–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è) –Ω–∞ –æ–±—ä–µ–∫—Ç, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Command.
                try {
                    if (c == null) throw new InvalidCommandException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + cmd);
                    c.execute(state, args);
                    state.addScore(1); //–¥–æ–±–∞–≤–ª—è–µ—Ç 1 –æ—á–∫–æ –∑–∞ –∫–∞–∂–¥—É—é —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
                } catch (InvalidCommandException e) {
                    System.out.println("–û—à–∏–±–∫–∞: " + e.getMessage());
                } catch (Exception e) {
                    System.out.println("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: " + e.getClass().getSimpleName() + ": " + e.getMessage());
                }
            }
        } catch (IOException e) {
            System.out.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞: " + e.getMessage());
        }
    }
}
