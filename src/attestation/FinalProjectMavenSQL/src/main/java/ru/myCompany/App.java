package ru.myCompany;

import org.flywaydb.core.Flyway;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.*;
import java.util.Properties;

public class App {

    private static String DB_URL = "jdbc:postgresql://localhost:5432/postgres";
    private static String DB_USER = "postgres";
    private static String DB_PASSWORD = "mypassword";

    public static void main(String[] args) {
        try {
            Class.forName("org.postgresql.Driver");
            System.out.println("‚úÖ PostgreSQL JDBC Driver –∑–∞–≥—Ä—É–∂–µ–Ω.");
        } catch (ClassNotFoundException e) {
            System.err.println("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            e.printStackTrace();
        }
        try {
            // 1. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –∏–∑ application.properties
            loadProperties();

            // 2. –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ Flyway (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
            runFlywayMigrations();

            // 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π
            executeCRUDOperations();

        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static void loadProperties() throws IOException {
        Properties props = new Properties();
        try (InputStream input = App.class.getClassLoader().getResourceAsStream("application.properties")) {
            if (input == null) {
                System.out.println("‚ö†Ô∏è –§–∞–π–ª application.properties –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            props.load(input);
            DB_URL = props.getProperty("db.url");
            DB_USER = props.getProperty("db.user");
            DB_PASSWORD = props.getProperty("db.password");
            System.out.println("‚úÖ –°–≤–æ–π—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: " + DB_URL);
        }
    }

    private static void runFlywayMigrations() {
        System.out.println("\nüöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π Flyway...");

        Flyway flyway = Flyway.configure()
                .dataSource(DB_URL, DB_USER, DB_PASSWORD)
                .locations("classpath:db/migration") // –ø—É—Ç—å –∫ –º–∏–≥—Ä–∞—Ü–∏—è–º
                .load();

        try {
            flyway.migrate();
            System.out.println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.");
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: " + e.getMessage());
        }
    }

    private static void executeCRUDOperations() throws SQLException {
        System.out.println("\nüìù –ù–∞—á–∏–Ω–∞–µ–º CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏...");

        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            conn.setAutoCommit(false); // –Ω–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

            try {
                // 1. –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (PreparedStatement)
                insertProductAndCustomer(conn);

                // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
                createOrder(conn);

                // 3. –ß—Ç–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∑–∞–∫–∞–∑–æ–≤ —Å JOIN
                printLatestOrders(conn);

                // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
                updateProductPriceAndStock(conn);

                // 5. –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
                deleteTestRecords(conn);

                conn.commit(); // —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                System.out.println("\n‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã.");

            } catch (SQLException e) {
                conn.rollback(); // –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –æ—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: " + e.getMessage());
                throw e;
            }

        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: " + e.getMessage());
        }
    }

    private static void insertProductAndCustomer(Connection conn) throws SQLException {
        System.out.println("\nüîπ 1. –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è...");

        String insertCustomer = """
            INSERT INTO customer (first_name, last_name, phone, email)
            VALUES (?, ?, ?, ?)
            RETURNING id;
            """;

        String insertProduct = """
            INSERT INTO product (description, price, quantity_in_stock, category)
            VALUES (?, ?, ?, ?)
            RETURNING id;
            """;

        try (PreparedStatement psCust = conn.prepareStatement(insertCustomer);
             PreparedStatement psProd = conn.prepareStatement(insertProduct)) {

            // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            psCust.setString(1, "–ò–≤–∞–Ω");
            psCust.setString(2, "–ü–µ—Ç—Ä–æ–≤");
            psCust.setString(3, "+79001234567");
            psCust.setString(4, "ivan.petrov@example.com");
            ResultSet rsCust = psCust.executeQuery();
            int customerId = 0;
            if (rsCust.next()) customerId = rsCust.getInt(1);

            // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
            psProd.setString(1, "–ù–æ—É—Ç–±—É–∫ SuperBook");
            psProd.setBigDecimal(2, new java.math.BigDecimal("45000.00"));
            psProd.setInt(3, 10);
            psProd.setString(4, "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞");
            ResultSet rsProd = psProd.executeQuery();
            int productId = 0;
            if (rsProd.next()) productId = rsProd.getInt(1);

            System.out.printf("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç ID=%d, —Ç–æ–≤–∞—Ä ID=%d\n", customerId, productId);
        }
    }

    private static void createOrder(Connection conn) throws SQLException {
        System.out.println("\nüîπ 2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...");

        String insertOrder = """
            INSERT INTO "order" (product_id, customer_id, order_date, quantity, status_id)
            VALUES (?, ?, CURRENT_DATE, ?, 
                    (SELECT id FROM order_status WHERE name = '–Ω–æ–≤—ã–π'))
            RETURNING id;
            """;

        try (PreparedStatement ps = conn.prepareStatement(insertOrder)) {
            ps.setInt(1, 1); // product_id
            ps.setInt(2, 1); // customer_id
            ps.setInt(3, 2); // quantity

            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                int orderId = rs.getInt(1);
                System.out.printf("‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ ID=%d\n", orderId);
            }
        }
    }

    private static void printLatestOrders(Connection conn) throws SQLException {
        System.out.println("\nüîπ 3. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤:");

        String query = """
            SELECT o.id, c.first_name || ' ' || c.last_name AS customer,
                   p.description AS product, o.quantity, o.order_date, s.name AS status
            FROM "order" o
            JOIN customer c ON o.customer_id = c.id
            JOIN product p ON o.product_id = p.id
            JOIN order_status s ON o.status_id = s.id
            ORDER BY o.order_date DESC
            LIMIT 5;
            """;

        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            System.out.printf("%-5s %-20s %-30s %-10s %-12s %-10s%n",
                    "ID", "–ö–ª–∏–µ–Ω—Ç", "–¢–æ–≤–∞—Ä", "–ö–æ–ª-–≤–æ", "–î–∞—Ç–∞", "–°—Ç–∞—Ç—É—Å");

            while (rs.next()) {
                System.out.printf("%-5d %-20s %-30s %-10d %-12s %-10s%n",
                        rs.getInt("id"),
                        rs.getString("customer"),
                        rs.getString("product"),
                        rs.getInt("quantity"),
                        rs.getDate("order_date"),
                        rs.getString("status"));
            }
        }
    }

    private static void updateProductPriceAndStock(Connection conn) throws SQLException {
        System.out.println("\nüîπ 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞...");

        String updateProduct = """
            UPDATE product
            SET price = price * 1.05, quantity_in_stock = quantity_in_stock - 1
            WHERE id = ?
            RETURNING description, price, quantity_in_stock;
            """;

        try (PreparedStatement ps = conn.prepareStatement(updateProduct)) {
            ps.setInt(1, 1); // –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å ID=1

            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String desc = rs.getString("description");
                double price = rs.getDouble("price");
                int stock = rs.getInt("quantity_in_stock");
                System.out.printf("‚úÖ –¢–æ–≤–∞—Ä '%s' –æ–±–Ω–æ–≤–ª—ë–Ω: —Ü–µ–Ω–∞=%.2f, –æ—Å—Ç–∞—Ç–æ–∫=%d\n", desc, price, stock);
            }
        }
    }

    private static void deleteTestRecords(Connection conn) throws SQLException {
        System.out.println("\nüîπ 5. –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π...");

        String deleteOrder = "DELETE FROM \"order\" WHERE customer_id = (SELECT id FROM customer WHERE email = 'ivan.petrov@example.com') RETURNING id;";
        String deleteCustomer = "DELETE FROM customer WHERE email = 'ivan.petrov@example.com' RETURNING id;";

        try (PreparedStatement psOrder = conn.prepareStatement(deleteOrder);
             PreparedStatement psCustomer = conn.prepareStatement(deleteCustomer)) {

            // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—ã
            ResultSet rsOrder = psOrder.executeQuery();
            int deletedOrders = 0;
            while (rsOrder.next()) deletedOrders++;
            System.out.printf("‚úÖ –£–¥–∞–ª–µ–Ω–æ %d –∑–∞–∫–∞–∑–æ–≤\n", deletedOrders);

            // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            ResultSet rsCust = psCustomer.executeQuery();
            if (rsCust.next()) {
                int deletedCustomerId = rsCust.getInt(1);
                System.out.printf("‚úÖ –£–¥–∞–ª—ë–Ω –∫–ª–∏–µ–Ω—Ç ID=%d\n", deletedCustomerId);
            }
        }
    }
}